// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: internal/pkg/pb/lesson/lesson.proto

package lesson

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LessonClient is the client API for Lesson service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LessonClient interface {
	ListLessons(ctx context.Context, in *ListLessonsRequest, opts ...grpc.CallOption) (Lesson_ListLessonsClient, error)
	GetLesson(ctx context.Context, in *GetLessonRequest, opts ...grpc.CallOption) (*GetLessonReply, error)
	CreateLesson(ctx context.Context, in *CreateLessonRequest, opts ...grpc.CallOption) (*CreateLessonReply, error)
	UpdateLesson(ctx context.Context, in *UpdateLessonRequest, opts ...grpc.CallOption) (*UpdateLessonReply, error)
	DeleteLesson(ctx context.Context, in *DeleteLessonRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type lessonClient struct {
	cc grpc.ClientConnInterface
}

func NewLessonClient(cc grpc.ClientConnInterface) LessonClient {
	return &lessonClient{cc}
}

func (c *lessonClient) ListLessons(ctx context.Context, in *ListLessonsRequest, opts ...grpc.CallOption) (Lesson_ListLessonsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Lesson_ServiceDesc.Streams[0], "/lesson.Lesson/ListLessons", opts...)
	if err != nil {
		return nil, err
	}
	x := &lessonListLessonsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Lesson_ListLessonsClient interface {
	Recv() (*ListLessonsReply, error)
	grpc.ClientStream
}

type lessonListLessonsClient struct {
	grpc.ClientStream
}

func (x *lessonListLessonsClient) Recv() (*ListLessonsReply, error) {
	m := new(ListLessonsReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *lessonClient) GetLesson(ctx context.Context, in *GetLessonRequest, opts ...grpc.CallOption) (*GetLessonReply, error) {
	out := new(GetLessonReply)
	err := c.cc.Invoke(ctx, "/lesson.Lesson/GetLesson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonClient) CreateLesson(ctx context.Context, in *CreateLessonRequest, opts ...grpc.CallOption) (*CreateLessonReply, error) {
	out := new(CreateLessonReply)
	err := c.cc.Invoke(ctx, "/lesson.Lesson/CreateLesson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonClient) UpdateLesson(ctx context.Context, in *UpdateLessonRequest, opts ...grpc.CallOption) (*UpdateLessonReply, error) {
	out := new(UpdateLessonReply)
	err := c.cc.Invoke(ctx, "/lesson.Lesson/UpdateLesson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonClient) DeleteLesson(ctx context.Context, in *DeleteLessonRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/lesson.Lesson/DeleteLesson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LessonServer is the server API for Lesson service.
// All implementations must embed UnimplementedLessonServer
// for forward compatibility
type LessonServer interface {
	ListLessons(*ListLessonsRequest, Lesson_ListLessonsServer) error
	GetLesson(context.Context, *GetLessonRequest) (*GetLessonReply, error)
	CreateLesson(context.Context, *CreateLessonRequest) (*CreateLessonReply, error)
	UpdateLesson(context.Context, *UpdateLessonRequest) (*UpdateLessonReply, error)
	DeleteLesson(context.Context, *DeleteLessonRequest) (*empty.Empty, error)
	mustEmbedUnimplementedLessonServer()
}

// UnimplementedLessonServer must be embedded to have forward compatible implementations.
type UnimplementedLessonServer struct {
}

func (UnimplementedLessonServer) ListLessons(*ListLessonsRequest, Lesson_ListLessonsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListLessons not implemented")
}
func (UnimplementedLessonServer) GetLesson(context.Context, *GetLessonRequest) (*GetLessonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLesson not implemented")
}
func (UnimplementedLessonServer) CreateLesson(context.Context, *CreateLessonRequest) (*CreateLessonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLesson not implemented")
}
func (UnimplementedLessonServer) UpdateLesson(context.Context, *UpdateLessonRequest) (*UpdateLessonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLesson not implemented")
}
func (UnimplementedLessonServer) DeleteLesson(context.Context, *DeleteLessonRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLesson not implemented")
}
func (UnimplementedLessonServer) mustEmbedUnimplementedLessonServer() {}

// UnsafeLessonServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LessonServer will
// result in compilation errors.
type UnsafeLessonServer interface {
	mustEmbedUnimplementedLessonServer()
}

func RegisterLessonServer(s grpc.ServiceRegistrar, srv LessonServer) {
	s.RegisterService(&Lesson_ServiceDesc, srv)
}

func _Lesson_ListLessons_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListLessonsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LessonServer).ListLessons(m, &lessonListLessonsServer{stream})
}

type Lesson_ListLessonsServer interface {
	Send(*ListLessonsReply) error
	grpc.ServerStream
}

type lessonListLessonsServer struct {
	grpc.ServerStream
}

func (x *lessonListLessonsServer) Send(m *ListLessonsReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Lesson_GetLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonServer).GetLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lesson.Lesson/GetLesson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonServer).GetLesson(ctx, req.(*GetLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lesson_CreateLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonServer).CreateLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lesson.Lesson/CreateLesson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonServer).CreateLesson(ctx, req.(*CreateLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lesson_UpdateLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonServer).UpdateLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lesson.Lesson/UpdateLesson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonServer).UpdateLesson(ctx, req.(*UpdateLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lesson_DeleteLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonServer).DeleteLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lesson.Lesson/DeleteLesson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonServer).DeleteLesson(ctx, req.(*DeleteLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Lesson_ServiceDesc is the grpc.ServiceDesc for Lesson service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Lesson_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lesson.Lesson",
	HandlerType: (*LessonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLesson",
			Handler:    _Lesson_GetLesson_Handler,
		},
		{
			MethodName: "CreateLesson",
			Handler:    _Lesson_CreateLesson_Handler,
		},
		{
			MethodName: "UpdateLesson",
			Handler:    _Lesson_UpdateLesson_Handler,
		},
		{
			MethodName: "DeleteLesson",
			Handler:    _Lesson_DeleteLesson_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListLessons",
			Handler:       _Lesson_ListLessons_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal/pkg/pb/lesson/lesson.proto",
}
